---
daemonset:
  # Annotations to apply to the daemonset
  annotations: {}
  # additionals labels
  labels: {}
  affinity: {}
  # Include the daemonset
  enabled: true
  # Extra environment variables for Filebeat container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs:
    - name: ELASTICSEARCH_HOST
      value: "es-test"
    - name: ELASTICSEARCH_PORT
      value: "9200"       
    - name: ELASTICSEARCH_USERNAME
      value: "admin"
    - name: ELASTICSEARCH_PASSWORD
      value: "changDevOps4changedme!@#"
    - name: ELASTICSEARCH_PROTOCOL
      value: "https"
    - name: ELASTICSEARCH_SSL_ENABLED
      value: "true"            
    - name: KIBANA_HOST
      value: "es-kibana"
    - name: KIBANA_PORT
      value: "5601"
    - name: KIBANA_PROTOCOL
      value: "https"
    - name: KIBANA_SSL_ENABLED
      value: "true"
    - name: KUBE_LABLES_APP_FOR_SERVER
      value: "flow-server"
    - name: KUBE_LABLES_APP_FOR_WEB
      value: "flow-web"
    - name: KUBE_LABLES_APP_FOR_REPO
      value: "flow-repository"
    - name: KUBE_LABLES_APP_FOR_AGENT
      value: "cdro-remote-agent-flow-agent"
    - name: KUBE_LABLES_APP_FOR_ZOOKEEPER
      value: "zookeeper"      
    - name: KUBE_TARGET_NAMESPACE
      value: "cdro"

  extraVolumes:
    []
    # - name: extras
    #   emptyDir: {}
  extraVolumeMounts:
    []
    # - name: extras
    #   mountPath: /usr/share/extras
    #   readOnly: true
  hostNetworking: false
  # Allows you to add any config files in /usr/share/filebeat
  # such as filebeat.yml for daemonset

  filebeatConfig:
    filebeat.yml: |
      setup.ilm.enabled: false
      filebeat.modules: {}
      filebeat.inputs: {}
      #- type: container
      #  paths:
      #    - /var/log/containers/*.log
      #  processors:
      #  - add_kubernetes_metadata:
      #      host: ${NODE_NAME}
      #      matchers:
      #      - logs_path:
      #          logs_path: "/var/log/containers/"
      filebeat.autodiscover:
        providers:
          - type: kubernetes    
            templates: 
              #------------------------------------------------------------------------------------------------------------------------------
              # 아직 처리 안된 것 ->  DevOps Insight
              #------------------------------------------------------------------------------------------------------------------------------
              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: "${KUBE_TARGET_NAMESPACE}"
                    - not:
                        or:
                          - equals:
                              kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_WEB}" 
                          - equals:
                              kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_SERVER}"
                          - equals:
                              kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_REPO}"
                          - equals:
                              kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_ZOOKEEPER}"
                config:
                  - type: container
                    paths: 
                      - /var/log/containers/*-${data.kubernetes.container.id}.log                  
                    containers.ids:
                      - ${data.kubernetes.container.id}
                    fields_under_root: true
                    fields:
                      cbflow.component: "other"
                    processors:
                      - convert:
                          fields:
                            - {from: "message", to: "log.message"}
              #------------------------------------------------------------------------------------------------------------------------------
              # Zookeeper
              #------------------------------------------------------------------------------------------------------------------------------
              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: "${KUBE_TARGET_NAMESPACE}" 
                    - equals:
                        kubernetes.labels.app:  "${KUBE_LABLES_APP_FOR_ZOOKEEPER}"
                config:
                  - type: container
                    paths: 
                      - /var/log/containers/*-${data.kubernetes.container.id}.log
                    tail_files: true
                    containers:
                      ids:
                        - ${data.kubernetes.container.id}
                    multiline.pattern:  '^\d\d\d\d(-\d\d){2} \d\d(:\d\d){2},\d\d\d \[' #2018-07-11T21:09:52.360
                    multiline.negate: true
                    multiline.match: after
                    timeout: 10s
                    fields_under_root: true
                    fields:
                      cbflow.component: "zookeeper"
                    processors:
                      # 2019-09-10 22:58:12,503 [myid:1] - INFO  [NIOWorkerThread-1:NIOServerCnxn@518] - Processing ruok command from /127.0.0.1:56682
                      - dissect:
                          tokenizer: "%{timestamp} [%{thread}] - %{level} [%{class}] - %{message}"
                          field: "message"
                          target_prefix: "log"
                      - script:
                          lang: javascript
                          source: >
                              function process(ev) {
                                  var field;
                                  field = ev.Get("log.level");
                                  if (field !== null) {
                                      ev.Put("log.level", field.trim());
                                  }
                                  return ev;
                              };
                              function test() {
                                  var ev;
                                  // check not parsed event
                                  ev = process(new Event({}));
                                  // check trim
                                  ev = process(new Event({log: {level: "  INFO  "}}));
                                  if (ev.Get("log.level") !== "INFO") {
                                      throw "expected log.level === 'INFO'";
                                  }
                              };
                      - script:
                          lang: javascript
                          source: >
                              function process(ev) {
                                  var ts = ev.Get("log.timestamp");
                                  if (ts !== null) {
                                      ev.Put("log.timestamp", ts.replace(/,/g, '.'));
                                  }
                                  return ev;
                              };
                      - timestamp:
                          field: "log.timestamp"
                          layouts:
                            - '2006-01-02T15:04:05Z'
                            - '2006-01-02T15:04:05.999Z'
                            - '2006-01-02T15:04:05.999-07:00'
                          test:
                            - '2019-06-22T16:33:51Z'
                            - '2019-11-18T04:59:51.123Z'
                            - '2020-08-03T07:10:20.123456+02:00'
              #------------------------------------------------------------------------------------------------------------------------------
              # Agent
              #------------------------------------------------------------------------------------------------------------------------------
              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: "${KUBE_TARGET_NAMESPACE}" 
                    - equals:
                        kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_AGENT}"
                config:
                  - type: container
                    paths: 
                      - /var/log/containers/*-${data.kubernetes.container.id}.log
                    tail_files: true
                    containers:
                      ids:
                        - ${data.kubernetes.container.id}
                    multiline.pattern:  '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d' #2018-07-11T21:09:52.360
                    multiline.negate: true
                    multiline.match: after
                    timeout: 10s
                    fields_under_root: true
                    fields:
                      cbflow.component: "agent"
                    processors:
                      - if:
                          regexp:
                            message: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d \* '
                        then:
                          - dissect:
                              tokenizer: "%{timestamp} * %{message}"
                              field: "message"
                              target_prefix: "log"
                          - if:
                              regexp:
                                log.message: '^ERROR:'
                            then:
                              - add_fields:
                                  target: ''
                                  fields:
                                    log.level: "ERROR"
                            else:
                              - if:
                                  regexp:
                                    log.message: '^WARNING:'
                                then:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "WARN"
                                else:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "STATUS"
                        else:
                          - if:
                              regexp:
                                message: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d \| [A-Z]+ +\| 0x[0-9a-f]+ \| '
                            then:
                              #------------------------------------------------------------------------------------------------------------------------------
                              # 2024-02-07T20:51:22.275 | DEBUG | 0x7f3f1c5ea700 | Handling ping message for request-id: ping-1-flow-bound-agent:7800
                              #------------------------------------------------------------------------------------------------------------------------------
                              - dissect:
                                  tokenizer: "%{timestamp} | %{level} | %{thread} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                            else:
                              #------------------------------------------------------------------------------------------------------------------------------
                              # 2024-02-07T18:56:31.993 | DEBUG | pool-001-005                   |          |            |                      | MasterAgentHandler        | No certificates found: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
                              #------------------------------------------------------------------------------------------------------------------------------
                              - dissect:
                                  tokenizer: "%{timestamp} | %{level} | %{thread} | %{context} | %{job} | %{ndc} | %{class} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                          - script:
                              lang: javascript
                              source: >
                                  function process(ev) {
                                      var field;
                                      field = ev.Get("log.level");
                                      if (field !== null) {
                                          ev.Put("log.level", field.trim());
                                      }
                                      return ev;
                                  };
                                  function test() {
                                      var ev;
                                      // check not parsed event
                                      ev = process(new Event({}));
                                      // check trim
                                      ev = process(new Event({log: {level: "  INFO  "}}));
                                      if (ev.Get("log.level") !== "INFO") {
                                          throw "expected log.level === 'INFO'";
                                      }
                                  };
                      - timestamp:
                          field: "log.timestamp"
                          layouts:
                            - '2006-01-02T15:04:05Z'
                            - '2006-01-02T15:04:05.999Z'
                            - '2006-01-02T15:04:05.999-07:00'
                          test:
                            - '2019-06-22T16:33:51Z'
                            - '2019-11-18T04:59:51.123Z'
                            - '2020-08-03T07:10:20.123456+02:00'

              #------------------------------------------------------------------------------------------------------------------------------
              # Server
              #------------------------------------------------------------------------------------------------------------------------------
              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: "${KUBE_TARGET_NAMESPACE}" 
                    - equals:
                        kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_SERVER}"
                config:
                  - type: container
                    paths: 
                      - /var/log/containers/*-${data.kubernetes.container.id}.log
                    tail_files: true
                    containers:
                      ids:
                        - ${data.kubernetes.container.id}
                    multiline.pattern: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d|^[A-Z]+ +\| (wrapper|jvm \d+) +\| \d\d\d\d(/\d\d){2} \d\d(:\d\d){2}\.\d\d\d'
                    multiline.negate: true
                    multiline.match: after
                    timeout: 10s
                    fields_under_root: true
                    fields:
                      cbflow.component: "server"
                    processors:
                      - if:
                          regexp:
                            message: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d \* ' # 2019-09-16T14:28:52.249 * xxxx
                        then:
                          - dissect:
                              tokenizer: "%{timestamp} * %{message}"
                              field: "message"
                              target_prefix: "log"
                          - if:
                              regexp:
                                log.message: '^ERROR:'
                            then:
                              - add_fields:
                                  target: ''
                                  fields:
                                    log.level: "ERROR"
                            else:
                              - if:
                                  regexp:
                                    log.message: '^WARNING:'
                                then:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "WARN"
                                else:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "STATUS"
                        else:
                          - if:
                              regexp:
                                message: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d \| '
                            then:
                              - if:
                                  regexp:
                                    message: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d \| [A-Z]+ +\|'  # 2019-09-16T14:28:52.249 | INFO |
                                then:
                                  #------------------------------------------------------------------------------------------------------------------------------
                                  # server logs (cluster 미 구성시)
                                  # 2024-02-07T14:28:52.249 | INFO  | Thread-1   |          |        |    | ServerStatus    | serverStatusManager is running
                                  #------------------------------------------------------------------------------------------------------------------------------
                                  - dissect:
                                      tokenizer: "%{timestamp} | %{level} | %{thread} | %{context} | %{job} | %{ndc} | %{class} | %{message}"
                                      field: "message"
                                      target_prefix: "log"
                                else:
                                  #------------------------------------------------------------------------------------------------------------------------------
                                  # server logs (cluster 구성시)
                                  # 2024-02-07T13:25:42.317 | flow-server-7d9d8d844b-4x5xw | INFO  | Thread-1    |    |    |     | Bootstrap     | Initializing
                                  #------------------------------------------------------------------------------------------------------------------------------
                                  - dissect:
                                      tokenizer: "%{timestamp} | %{node} | %{level} | %{thread} | %{context} | %{job} | %{ndc} | %{class} | %{message}"
                                      field: "message"
                                      target_prefix: "log"
                            else:
                              #------------------------------------------------------------------------------------------------------------------------------
                              # service logs
                              # INFO   | jvm 1    | 2019/09/05 13:25:31.469 | WrapperManager: Initializing...
                              #------------------------------------------------------------------------------------------------------------------------------
                              - dissect:
                                  tokenizer: "%{level} | %{thread} | %{timestamp} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                      - script:
                          lang: javascript
                          source: >
                              function process(ev) {
                                  var field;
                                  field = ev.Get("log.level");
                                  if (field !== null) {
                                      ev.Put("log.level", field.trim());
                                  }
                                  return ev;
                              };
                              function test() {
                                  var ev;
                                  // check not parsed event
                                  ev = process(new Event({}));
                                  // check trim
                                  ev = process(new Event({log: {level: "  INFO  "}}));
                                  if (ev.Get("log.level") !== "INFO") {
                                     throw "expected log.level === 'INFO'";
                                  }
                              };
                      - timestamp:
                          field: "log.timestamp"
                          layouts:
                            - '2006-01-02T15:04:05Z'
                            - '2006-01-02T15:04:05.999Z'
                            - '2006-01-02T15:04:05.999-07:00'
                          test:
                            - '2019-06-22T16:33:51Z'
                            - '2019-11-18T04:59:51.123Z'
                            - '2020-08-03T07:10:20.123456+02:00'

              #------------------------------------------------------------------------------------------------------------------------------
              # Repository (Server 와 거의 유사함)
              #------------------------------------------------------------------------------------------------------------------------------
              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: "${KUBE_TARGET_NAMESPACE}" 
                    - equals:
                        kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_REPO}"
                config:
                  - type: container
                    paths: 
                      - /var/log/containers/*-${data.kubernetes.container.id}.log
                    tail_files: true
                    containers:
                      ids:
                        - ${data.kubernetes.container.id}
                    multiline.pattern: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d|^[A-Z]+ +\| (wrapper|jvm|jetty-bootstrap \d+) +\| \d\d\d\d(/\d\d){2} \d\d(:\d\d){2}\.\d\d\d'
                    multiline.negate: true
                    multiline.match: after
                    timeout: 10s
                    fields_under_root: true
                    fields:
                      cbflow.component: "repository"
                    processors:
                      - if:
                          regexp:
                            #--------------------------------------------------------------------
                            # 2024-02-05T17:56:27.265 * Login on CloudBees Flow server...
                            #--------------------------------------------------------------------
                            message: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d \* '
                        then:
                          - dissect:
                              tokenizer: "%{timestamp} * %{message}"
                              field: "message"
                              target_prefix: "log"
                          - if:
                              regexp:
                                log.message: '^ERROR:'
                            then:
                              - add_fields:
                                  target: ''
                                  fields:
                                    log.level: "ERROR"
                            else:
                              - if:
                                  regexp:
                                    log.message: '^WARNING:'
                                then:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "WARN"
                                else:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "STATUS"
                        else:
                          - if:
                              regexp:
                                message: '^\d\d\d\d(-\d\d){2}T\d\d(:\d\d){2}\.\d\d\d \| '
                            then:
                              #------------------------------------------------------------------------------------------------------------------------------
                              # repository logs
                              # 2024-02-07T20:29:08.350 | INFO  | StatisticsTimer   |    |    |    | RepositoryServerImpl           | All timers by name:
                              #------------------------------------------------------------------------------------------------------------------------------
                              - dissect:
                                  tokenizer: "%{timestamp} | %{level} | %{thread} | %{context} | %{job} | %{ndc} | %{class} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                            else:
                              #------------------------------------------------------------------------------------------------------------------------------
                              # service logs
                              # INFO   | jvm 1    | 2019/09/05 13:25:31.469 | WrapperManager: Initializing...
                              #------------------------------------------------------------------------------------------------------------------------------
                              - dissect:
                                  tokenizer: "%{level} | %{thread} | %{timestamp} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                          - script:
                              lang: javascript
                              source: >
                                  function process(ev) {
                                      var field;
                                      field = ev.Get("log.level");
                                      if (field !== null) {
                                          ev.Put("log.level", field.trim());
                                      }
                                      return ev;
                                  };
                                  function test() {
                                      var ev;
                                      // check not parsed event
                                      ev = process(new Event({}));
                                      // check trim
                                      ev = process(new Event({log: {level: "  INFO  "}}));
                                      if (ev.Get("log.level") !== "INFO") {
                                          throw "expected log.level === 'INFO'";
                                      }
                                  };
                      - timestamp:
                          field: "log.timestamp"
                          layouts:
                            - '2006-01-02T15:04:05Z'
                            - '2006-01-02T15:04:05.999Z'
                            - '2006-01-02T15:04:05.999-07:00'
                          test:
                            - '2019-06-22T16:33:51Z'
                            - '2019-11-18T04:59:51.123Z'
                            - '2020-08-03T07:10:20.123456+02:00'
              #------------------------------------------------------------------------------------------------------------------------------
              # Web
              #------------------------------------------------------------------------------------------------------------------------------
              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: "${KUBE_TARGET_NAMESPACE}" 
                    - equals:
                        kubernetes.labels.app: "${KUBE_LABLES_APP_FOR_WEB}"
                config:
                  - type: container
                    paths: 
                      - /var/log/containers/*-${data.kubernetes.container.id}.log
                    tail_files: true
                    containers:
                      ids:
                        - ${data.kubernetes.container.id}
                    multiline.pattern: '^\d\d\d\d(-\d\d){2} \d\d(:\d\d){2}\.\d+' #2019-09-13 21:34:43.179571
                    multiline.negate: true
                    multiline.match: after
                    timeout: 10s
                    fields_under_root: true
                    fields:
                      cbflow.component: "web"
                    processors:
                      - if:
                          regexp:
                            message: '^\d\d\d\d(-\d\d){2} \d\d(:\d\d){2}\.\d+ \* '
                        then:
                          - dissect:
                              tokenizer: "%{timestamp} * %{message}"
                              field: "message"
                              target_prefix: "log"
                          - if:
                              regexp:
                                log.message: '^ERROR:'
                            then:
                              - add_fields:
                                  target: ''
                                  fields:
                                    log.level: "ERROR"
                            else:
                              - if:
                                  regexp:
                                    log.message: '^WARNING:'
                                then:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "WARN"
                                else:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "STATUS"
                        else:
                          - if:
                              regexp:
                                message: '^\d\d\d\d(-\d\d){2} \d\d(:\d\d){2}\.\d+ \| [a-z0-9_-]+:[a-z]+ \| pid \d+ \|'
                            then:
                              - dissect:
                                  tokenizer: "%{timestamp} | %{level} | %{thread} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                              - script:
                                  lang: javascript
                                  source: >
                                      function process(ev) {
                                          var level = ev.Get("log.level");
                                          if (level !== null) {
                                              var ar = level.split(':');
                                              if (ar.length !== 2) {
                                                  throw "wrong array length for log.level: " + level;
                                              }
                                              ev.Put("log.module", ar[0]);
                                              if (ar[1] === 'error') {
                                                  ev.Put("log.level", "ERROR");
                                              } else if (ar[1] === 'warning') {
                                                  ev.Put("log.level", "WARN");
                                              } else if (ar[1] === 'debug') {
                                                  ev.Put("log.level", "DEBUG");
                                              } else if (ar[1] === 'notice') {
                                                  ev.Put("log.level", "INFO");
                                              } else if (ar[1] === 'info') {
                                                  ev.Put("log.level", "INFO");
                                              } else if (ar[1] === 'alert') {
                                                  ev.Put("log.level", "ALERT");
                                              } else if (ar[1] === 'emerg') {
                                                  ev.Put("log.level", "CRIT");
                                              } else if (ar[1] === 'crit') {
                                                  ev.Put("log.level", "CRIT");
                                              } else if (ar[1].indexOf('trace') === 0) {
                                                  ev.Put("log.level", "TRACE");
                                              } else {
                                                  ev.Put("log.level", ar[1]);
                                              }
                                          }
                                          return ev;
                                      };
                                      function test() {
                                          var ev;
                                          ev = process(new Event({log: {level: "php7:error"}}));
                                          if (ev.Get("log.module") !== "php7") {
                                              throw "expected log.module === php7";
                                          }
                                          if (ev.Get("log.level") !== "ERROR") {
                                              throw "expected log.level === ERROR";
                                          }
                                          ev = process(new Event({log: {level: "php7:warning"}}));
                                          if (ev.Get("log.level") !== "WARN") {
                                              throw "expected log.level === WARN";
                                          }
                                          ev = process(new Event({log: {level: "php7:debug"}}));
                                          if (ev.Get("log.level") !== "DEBUG") {
                                              throw "expected log.level === DEBUG";
                                          }
                                          ev = process(new Event({log: {level: "php7:notice"}}));
                                          if (ev.Get("log.level") !== "INFO") {
                                              throw "expected log.level === INFO";
                                          }
                                          ev = process(new Event({log: {level: "php7:info"}}));
                                          if (ev.Get("log.level") !== "INFO") {
                                              throw "expected log.level === INFO";
                                          }
                                          ev = process(new Event({log: {level: "php7:alert"}}));
                                          if (ev.Get("log.level") !== "ALERT") {
                                              throw "expected log.level === ALERT";
                                          }
                                          ev = process(new Event({log: {level: "php7:emerg"}}));
                                          if (ev.Get("log.level") !== "CRIT") {
                                              throw "expected log.level === CRIT";
                                          }
                                          ev = process(new Event({log: {level: "php7:crit"}}));
                                          if (ev.Get("log.level") !== "CRIT") {
                                              throw "expected log.level === CRIT";
                                          }
                                          ev = process(new Event({log: {level: "php7:trace"}}));
                                          if (ev.Get("log.level") !== "TRACE") {
                                              throw "expected log.level === TRACE";
                                          }
                                          ev = process(new Event({log: {level: "php7:trace8"}}));
                                          if (ev.Get("log.level") !== "TRACE") {
                                              throw "expected log.level === TRACE";
                                          }
                                      };
                            else:
                              - dissect:
                                  tokenizer: "%{timestamp} | %{address} | %{user} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                              - add_fields:
                                  target: ''
                                  fields:
                                    log.level: "INFO"
                      - timestamp:
                          field: "log.timestamp"
                          layouts:
                            - '2006-01-02 15:04:05.999999'
                          test:
                            - '2019-09-13 21:35:43.177728'
      #------------------------------------------------------------------------------------------------------------------------------
      # index 에 kubernetes metadata 정보를 포함 
      #     https://www.elastic.co/guide/en/beats/filebeat/current/add-kubernetes-metadata.html
      #     in_cluster 는 Filebeat 가 클러스터 내에서 실행 중을 의미
      #------------------------------------------------------------------------------------------------------------------------------
      processors:
        - add_kubernetes_metadata:
            in_cluster: "true"

      output.elasticsearch: 
        index: "cbf-%{[cbflow.component]}-%{+yyyy.MM.dd}"
        hosts: ["${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]
        protocol: "${ELASTICSEARCH_PROTOCOL}"
        username: "${ELASTICSEARCH_USERNAME}"
        password: "${ELASTICSEARCH_PASSWORD}"
        ssl.enabled: "${ELASTICSEARCH_SSL_ENABLED}"
        #ssl.certificate_authorities: ["/usr/share/filebeat/config/certs/ca.crt"]
        ssl.verification_mode: "none"
      setup.kibana:
        host: "${KIBANA_PROTOCOL}://${KIBANA_HOST}:${KIBANA_PORT}"
        ssl.enabled: "${KIBANA_SSL_ENABLED}"
        #ssl.certificate_authorities: ["/usr/share/filebeat/config/certs/ca.crt"]
        ssl.verification_mode: "none"
      setup.template: 
        name: "cbf"
        pattern: "cbf-*"
        overwrite: "true"
        enabled: "true"
  # Only used when updateStrategy is set to "RollingUpdate"
  maxUnavailable: 1
  nodeSelector: {}
  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security other sensitive values
  secretMounts: []
  #  - name: filebeat-certificates
  #    secretName: filebeat-certificates
  #    path: /usr/share/filebeat/certs
  # Various pod security context settings. Bear in mind that many of these have an impact on Filebeat functioning properly.
  #
  # - User that the container will execute as. Typically necessary to run as root (0) in order to properly collect host container logs.
  # - Whether to execute the Filebeat containers as privileged containers. Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1000m"
      memory: "200Mi"
  tolerations: []

deployment: 
  enabled: false

# Replicas being used for the filebeat deployment
replicas: 1

extraContainers: ""
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

extraInitContainers: []
# - name: dummy-init

# Root directory where Filebeat will write data to in order to persist registry data across pod restarts (file position and other metadata).
hostPathRoot: /var/lib

dnsConfig: {}
# options:
#   - name: ndots
#     value: "2"
hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"
image: "docker.elastic.co/beats/filebeat"
imageTag: "7.17.1"
imagePullPolicy: "IfNotPresent"
imagePullSecrets: []

livenessProbe:
  exec:
    command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash -e
        curl --fail 127.0.0.1:5066
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

readinessProbe:
  exec:
    command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash -e
        filebeat test output
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

# Whether this chart should self-manage its service account, role, and associated role binding.
managedServiceAccount: true

clusterRoleRules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "apps"
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch

podAnnotations:
  {}
  # iam.amazonaws.com/role: es-cluster

# Custom service account override that the pod will use
serviceAccount: ""

# Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
serviceAccountAnnotations:
  {}
  # eks.amazonaws.com/role-arn: arn:aws:iam::111111111111:role/k8s.clustername.namespace.serviceaccount

# How long to wait for Filebeat pods to stop gracefully
terminationGracePeriod: 30
# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

updateStrategy: RollingUpdate

# Override various naming aspects of this chart
# Only edit these if you know what you're doing
nameOverride: ""
fullnameOverride: "es-filebeat"

# DEPRECATED
affinity: {}
envFrom: []
extraEnvs: []
extraVolumes: []
extraVolumeMounts: []
# Allows you to add any config files in /usr/share/filebeat
# such as filebeat.yml for both daemonset and deployment
filebeatConfig: {}
nodeSelector: {}
podSecurityContext: {}
resources: {}
secretMounts: []
#  - name: elastic-certificates
#    secretName: cdro-ca-cert
#    path: /usr/share/filebeat/config/certs
#    defaultMode: "0755"
tolerations: []
labels: {}
